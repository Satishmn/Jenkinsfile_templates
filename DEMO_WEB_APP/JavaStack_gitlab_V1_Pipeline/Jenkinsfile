node {
   def mvnHome  
   
   stage('Checkout code from gitlab') { // for display purposes
   echo(message: env.JOB_NAME)
      // Get some code from a GitHub repository
      //git url :'https://github.com/jglick/simple-maven-project-with-tests.git',
     checkout([$class: 'GitSCM', branches: [[name: 'origin/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], 
          userRemoteConfigs: [[credentialsId: 'Satish-Auro-gitlab', url: 'https://gitlab.com/Aurotechcorp/Aurotech_AMDS_JAVA_POC.git']]])     
      // Get the Maven tool.
      // ** NOTE: This 'M3' Maven tool must be configured
      // **       in the global configuration.
    
      mvnHome = tool 'M352'
          
    sh "git log --format=%B -n 1 HEAD > gitcommitMessage"
  env.COMMIT_MSG = readFile('gitcommitMessage')
  //env.COMMIT_MSG = cat gitcommitMessage | awk /'{printf $1 }/'
  env.COMMIT_MSG=env.COMMIT_MSG.trim()
  sh "echo '${env.COMMIT_MSG}' bbb"
  sh "echo '${env.JOB_NAME}' job name"
   }
   
    
     stage('SonarQube Scan and Analysis') {
    // requires SonarQube Scanner in Jenkins Global tools configuration
     ws("/var/lib/jenkins/workspace/${env.JOB_NAME}/DEMO_WEB_APP")
   //  ws('DEMO_WEB_APP')
     {
   	 def scannerHome = tool 'FDAREV_SQ';
    	 	withSonarQubeEnv('FDAREV_SQ') {
      		sh "${scannerHome}/bin/sonar-scanner"
    		}
		}
	}
	
	
	stage("Quality Gate Checks"){
	sh 'sleep 10'
  	timeout(time: 1, unit: 'MINUTES') { // Just in case something goes wrong, pipeline will be killed after a timeout
    def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
    if (qg.status != 'OK') {
      error "Pipeline aborted due to quality gate failure: ${qg.status}"
    }
    else {
      echo "Quality gate passed with result: ${qg.status}" 
        }
  }
}
  
   stage('Build Apllication') {
      // Run the maven build
      if (isUnix()) {
         sh "${mvnHome}/bin/mvn -f DEMO_WEB_APP/pom.xml clean package"
         echo "latest_buildNumber: ${BUILD_NUMBER}"
      } else {
         bat(/"${mvnHome}\bin\mvn" -Dmaven.test.failure.ignore clean package/)
      }
   }
   
   stage('Unit Testing') {
      junit '**/target/surefire-reports/TEST-*.xml'
      archive 'target/*.war'
   }
   
   stage('Publish to Nexus')
   {   
   	nexusPublisher nexusInstanceId: '1234', nexusRepositoryId: 'Releases', packages: [[$class: 'MavenPackage', 
   	mavenAssetList: [[classifier: '', extension: '', filePath: 'DEMO_WEB_APP/target/DemoFDAWebApp.war']],
   	mavenCoordinate: [artifactId: 'DemoFDAWebApp', groupId: 'DemoFDAWebApp', packaging: 'war', version: '$BUILD_NUMBER']]]
   }
   
   
   stage('Deploy to Dev'){
  	sshagent(credentials:['04902c98-413f-4c60-92d7-cfc9ab76b997']) {
		sh "scp /var/lib/jenkins/workspace/${env.JOB_NAME}/DEMO_WEB_APP/target/DemoFDAWebApp.war ec2-user@ec2-34-227-96-149.compute-1.amazonaws.com:/usr/share/tomcat/webapps/DemoFDAWebApp.war"
   	//	sh 'chown tomcat:tomcat /usr/share/tomcat/webapps/DemoFDAWebApp.war'
    	//	sh 'scp /var/lib/jenkins/workspace/pipeline_DEMO_WEB_APP_V2/DEMO_WEB_APP/target/DemoFDAWebApp.war ec2-user@ec2-34-227-96-149.compute-1.amazonaws.com:/usr/share/tomcat/webapps/'
		}
   }
   
   stage('Cucumber Testing') { // for display purposes
      // Get some code from a GitHub repository
      //git url :'https://github.com/jglick/simple-maven-project-with-tests.git',
     checkout([$class: 'GitSCM', branches: [[name: 'origin/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], 
          userRemoteConfigs: [[credentialsId: 'Satish-Auro-gitlab', url: 'https://gitlab.com/Aurotechcorp/Aurotech_AMDS_JAVA_POC.git']]])     
      // Get the Maven tool.
      // ** NOTE: This 'M3' Maven tool must be configured
      // **       in the global configuration.           
      mvnHome = tool 'M352'
      
            // Run the maven build
      if (isUnix()) {
          sh 'sleep 3' 
         sh "${mvnHome}/bin/mvn -f com.aurotech.cucumber/pom.xml clean install"
      } else {	
         bat(/"${mvnHome}\bin\mvn" -Dmaven.test.failure.ignore clean package/)
      }         
   } 
   
      stage('Publish Cucumber Report') {
        //generate cucumber html report
         junit '**/target/surefire-reports/TEST-com.aurotech.cucumber*.xml'
         
            step([$class: 'CucumberReportPublisher', jsonReportDirectory: 'com.aurotech.cucumber/target', fileIncludePattern: 'cucumber.json'])      
    }
          
       stage('Deploy to Test'){
  	sshagent(credentials:['73bf97ea-1c76-4f57-8bf2-260488b4a519']) {
  	 echo "latest_buildNumber: ${BUILD_NUMBER}"
  	 sh 'rm -f ec2-user@ec2-34-238-171-246.compute-1.amazonaws.com:/home/ec2-user/DemoFDAWebApp*.war'
  	sh "ssh ec2-user@ec2-34-238-171-246.compute-1.amazonaws.com  ./aa.sh ${BUILD_NUMBER}"
//		sh 'scp /var/lib/jenkins/workspace/pipeline_DEMO_WEB_APP_V2/DEMO_WEB_APP/target/DemoFDAWebApp.war ec2-user@ec2-34-238-171-246.compute-1.amazonaws.com:/home/orawls/DemoFDAWebApp.war'
 // 	sh 'sudo su - orawls'
 	 sh 'rm -f ec2-user@ec2-34-238-171-246.compute-1.amazonaws.com:/home/orawls/DemoFDAWebApp*.war' 
 	 sh "ssh ec2-user@ec2-34-238-171-246.compute-1.amazonaws.com  ./cpToWLS.sh ${BUILD_NUMBER}"	
//	sh 'cp ec2-user@ec2-34-238-171-246.compute-1.amazonaws.com:/home/ec2-user/DemoFDAWebApp-${BUILD_NUMBER}.war ec2-user@ec2-34-238-171-246.compute-1.amazonaws.com:/home/orawls/DemoFDAWebApp.war'
//	sh 'sudo chown orawls:oinstall /home/orawls/DemoFDAWebApp.war'
//	sh 'sudo rm -rf /home/ec2-user/*.war'
	sh "ssh ec2-user@ec2-34-238-171-246.compute-1.amazonaws.com  './weblogic_redeploy_FDAREV.sh'"
	}
  }


   stage('Update JIRA'){ 
   try { 
     String [ ] commitMsgStr =[ "","" ]
     commitMsgStr = env.COMMIT_MSG.trim().split(';')
    sh "echo '${env.COMMIT_MSG}'"
    
    echo "Jira Tkt : "+commitMsgStr[0]
    echo "Code Comments : "+commitMsgStr[1]
           
         def issue = jiraGetFields idOrKey: commitMsgStr[0], site: 'LOCAL', failOnError: false        
         echo issue.data.toString()
         
    //    jiraAddComment site: 'LOCAL', idOrKey: 'DSS-115' , comment: " hard coded --->Job#'${env.JOB_NAME}' (${env.BUILD_NUMBER}) builded. Please go to ${env.BUILD_URL}."
  		jiraAddComment site: 'LOCAL', idOrKey: commitMsgStr[0]  , comment: commitMsgStr[1] +" from Job  '${env.JOB_NAME}' (${env.BUILD_NUMBER}) build. Please go to ${env.BUILD_URL}."   
    }
    catch (ex) {
    // If there was an exception thrown, the build failed
    currentBuild.result = "SUCCESS"
    //println(ex.toString())
   // throw e
   		}
    }
}
